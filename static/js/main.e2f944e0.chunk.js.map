{"version":3,"sources":["components/SetBalance/index.js","components/CalculateBalance/index.js","App.js","serviceWorker.js","index.js"],"names":["SetBalance","isHideFirstScreen","saveBalance","useState","balance","setBalance","className","onSubmit","e","console","log","preventDefault","localStorage","setItem","Number","type","step","min","required","value","onChange","target","disabled","CalculateBalance","getItem","setDisabled","qq","setQq","val","setVal","firstScreen","setFirstScreen","onClick","event","operation","id","toFixed","useEffect","autoFocus","onBlur","Math","abs","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"8JAoCeA,EAlCI,SAAC,GAAwC,IAAtCC,EAAqC,EAArCA,kBAAmBC,EAAkB,EAAlBA,YAAkB,EACzBC,mBAAS,IADgB,mBAChDC,EADgD,KACvCC,EADuC,KAWvD,OACI,0BAAMC,UAAW,mBAAoBC,SATxB,SAACC,GACdC,QAAQC,IAAI,oBAAqBT,GACjCO,EAAEG,iBACFC,aAAaC,QAAQ,UAAWT,GAChCH,GAAkB,GAClBC,EAAYY,OAAOV,MAKf,2BAAOE,UAAW,SACd,2BACIS,KAAK,SACLC,KAAK,MACLC,IAAI,IACJC,UAAU,EACVC,MAAOf,EACPgB,SAAU,SAACZ,GAAD,OAAOH,EAAWG,EAAEa,OAAOF,UAEzC,0FAEJ,4BACIb,UAAW,MACXgB,SAAsB,KAAZlB,GAAsC,IAApBU,OAAOV,IAFvC,UCqEGmB,EA5FU,WAAO,IAAD,EACGpB,mBAASS,aAAaY,QAAQ,YADjC,mBACpBpB,EADoB,KACXC,EADW,OAEKF,oBAAS,GAFd,mBAEpBmB,EAFoB,KAEVG,EAFU,OAGPtB,mBAAS,GAHF,mBAGpBuB,EAHoB,KAGhBC,EAHgB,OAILxB,mBAAS,IAJJ,mBAIpByB,EAJoB,KAIfC,EAJe,OAKW1B,oBAAS,GALpB,mBAKpB2B,EALoB,KAKPC,EALO,KAqBrBC,EAAU,SAACC,GAdC,IAACC,IAeLD,EAAMZ,OAAOc,GAbjB9B,EADQ,MAAd6B,GACkBpB,OAAOV,GAAWU,OAAOY,IAAKU,QAAQ,IACtCtB,OAAOV,GAAWU,OAAOY,IAAKU,QAAQ,IAaxDP,EAAO,IACPJ,GAAY,IAQhB,OALAY,qBAAU,WACFzB,aAAaY,QAAQ,YACrBO,GAAe,KAEpB,IAEC,oCACKD,EACG,kBAAC,EAAD,CACI7B,kBAAmB8B,EACnB7B,YAAaG,IAGjB,oCACI,yBAAKC,UAAW,WAAYF,GAC5B,yBAAKE,UAAW,WACZ,2BAAOA,UAAW,SACd,2BACIS,KAAK,SACLE,IAAI,IACJqB,WAAW,EACXlB,SAnCX,SAACa,GAAW,IACjBd,EAAUc,EAAMZ,OAAhBF,MACAM,GAARN,GACAU,EAAOV,IAiCiBoB,OA9Bb,SAACN,GAAD,OAAWN,EAAMa,KAAKC,IAAIR,EAAMZ,OAAOF,SA+B1BA,MAAOS,EACPV,UAAU,IAEd,iEAEJ,yBAAKZ,UAAW,cACZ,4BACIA,UACI,wCAEJgB,SAAUA,EACVU,QAASA,EACTG,GAAG,KANP,gEAUA,4BACI7B,UACI,yCAEJgB,SAAUA,EACVU,QAASA,EACTG,GAAG,KANP,0DAUA,4BACI7B,UAAW,sBACX0B,QAAS,kBACLpB,aAAaC,QAAQ,UAAWT,KAHxC,+DC1EbsC,EAFH,kBAAM,kBAAC,EAAD,OCSEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLnD,QAAQmD,MAAMA,EAAMC,a","file":"static/js/main.e2f944e0.chunk.js","sourcesContent":["import React, { useState } from \"react\";\n\nconst SetBalance = ({ isHideFirstScreen, saveBalance }) => {\n    const [balance, setBalance] = useState(\"\");\n\n    const onSubmit = (e) => {\n        console.log(\"isHideFirstScreen\", isHideFirstScreen);\n        e.preventDefault();\n        localStorage.setItem(\"balance\", balance);\n        isHideFirstScreen(false);\n        saveBalance(Number(balance));\n    };\n\n    return (\n        <form className={\"set-balance-form\"} onSubmit={onSubmit}>\n            <label className={\"label\"}>\n                <input\n                    type=\"number\"\n                    step=\"any\"\n                    min=\"0\"\n                    required={true}\n                    value={balance}\n                    onChange={(e) => setBalance(e.target.value)}\n                />\n                <span>Ваш баланс</span>\n            </label>\n            <button\n                className={\"btn\"}\n                disabled={balance === \"\" || Number(balance) === 0}\n            >\n                Save\n            </button>\n        </form>\n    );\n};\n\nexport default SetBalance;\n","import React, { useState, useEffect } from \"react\";\nimport SetBalance from \"../SetBalance\";\n\nconst CalculateBalance = () => {\n    const [balance, setBalance] = useState(localStorage.getItem(\"balance\"));\n    const [disabled, setDisabled] = useState(true);\n    const [qq, setQq] = useState(0);\n    const [val, setVal] = useState(\"\");\n    const [firstScreen, setFirstScreen] = useState(true);\n\n    const calculate = (operation) => {\n        operation === \"+\"\n            ? setBalance((Number(balance) + Number(qq)).toFixed(2))\n            : setBalance((Number(balance) - Number(qq)).toFixed(2));\n    };\n\n    const onChange = (event) => {\n        const { value } = event.target;\n        value ? setDisabled(false) : setDisabled(true);\n        setVal(value);\n    };\n\n    const onBlur = (event) => setQq(Math.abs(event.target.value));\n\n    const onClick = (event) => {\n        calculate(event.target.id);\n        setVal(\"\");\n        setDisabled(true);\n    };\n\n    useEffect(() => {\n        if (localStorage.getItem(\"balance\")) {\n            setFirstScreen(false);\n        }\n    }, []);\n    return (\n        <>\n            {firstScreen ? (\n                <SetBalance\n                    isHideFirstScreen={setFirstScreen}\n                    saveBalance={setBalance}\n                />\n            ) : (\n                <>\n                    <div className={\"balance\"}>{balance}</div>\n                    <div className={\"actions\"}>\n                        <label className={\"label\"}>\n                            <input\n                                type=\"number\"\n                                min=\"0\"\n                                autoFocus={false}\n                                onChange={onChange}\n                                onBlur={onBlur}\n                                value={val}\n                                required={true}\n                            />\n                            <span>Сумма</span>\n                        </label>\n                        <div className={\"operations\"}>\n                            <button\n                                className={\n                                    \"operations__btn operations__btn--plus\"\n                                }\n                                disabled={disabled}\n                                onClick={onClick}\n                                id=\"+\"\n                            >\n                                Заработано\n                            </button>\n                            <button\n                                className={\n                                    \"operations__btn operations__btn--minus\"\n                                }\n                                disabled={disabled}\n                                onClick={onClick}\n                                id=\"-\"\n                            >\n                                Потрачено\n                            </button>\n                            <button\n                                className={\"operations__btn btn\"}\n                                onClick={() =>\n                                    localStorage.setItem(\"balance\", balance)\n                                }\n                            >\n                                Сохранить\n                            </button>\n                        </div>\n                    </div>\n                </>\n            )}\n        </>\n    );\n};\n\nexport default CalculateBalance;\n","import React from \"react\";\nimport CalculateBalance from \"./components/CalculateBalance\";\n\nconst App = () => <CalculateBalance />;\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}