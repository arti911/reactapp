{"version":3,"sources":["components/Nav/index.js","components/Currency/index.js","components/Price/index.js","About.js","App.js","serviceWorker.js","index.js"],"names":["Nav","className","to","Currency","currency","data","useState","Date","date","description","rate_float","toFixed","getDate","getMonth","getFullYear","Price","setCurrency","countries","query","setQuery","useEffect","getExchangeRates","a","fetch","response","json","Object","values","bpi","value","onChange","e","target","map","country","key","curr","code","About","Home","App","path","exact","component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.445c9b6e.chunk.js","sourcesContent":["import React from 'react'\r\nimport './index.css'\r\nimport { Link } from 'react-router-dom'\r\n\r\nconst Nav = () => {\r\n  return (\r\n    <nav className=\"nav\">\r\n      <Link to=\"/\">\r\n        <h3>Logo</h3>\r\n      </Link>\r\n      <ul className=\"nav__list\">\r\n        <Link to=\"/about\">\r\n          <li>About</li>\r\n        </Link>\r\n        <Link to=\"/price\">\r\n          <li>Price</li>\r\n        </Link>\r\n      </ul>\r\n    </nav>\r\n  )\r\n}\r\n\r\nexport default Nav;","import React, { useState } from 'react'\r\nimport './style.css'\r\n\r\nconst Currency = ({ data:currency }) => {\r\n\tconst [date, setDate] = useState(new Date())\r\n\r\n\treturn (\r\n\t\t<div className=\"currency\">\r\n\t\t\t<div className=\"currency__country\">{currency.description}</div>\r\n\t\t\t<div>Price: {currency.rate_float.toFixed(2)}</div>\r\n\t\t\t<div>{`${date.getDate()}.${date.getMonth()}.${date.getFullYear()}`}</div>\r\n\t\t</div>\r\n\t)\r\n}\r\n\r\nexport default Currency;","import React, { useState, useEffect } from 'react'\r\nimport Currency from '../Currency';\r\nimport './index.css';\r\n\r\nconst Price = () => {\r\n  const [currency, setCurrency] = useState([]);\r\n  const [countries, setCountries] = useState([{\"currency\":\"AED\",\"country\":\"United Arab Emirates Dirham\"},{\"currency\":\"AFN\",\"country\":\"Afghan Afghani\"},{\"currency\":\"ALL\",\"country\":\"Albanian Lek\"},{\"currency\":\"AMD\",\"country\":\"Armenian Dram\"},{\"currency\":\"ANG\",\"country\":\"Netherlands Antillean Guilder\"},{\"currency\":\"AOA\",\"country\":\"Angolan Kwanza\"},{\"currency\":\"ARS\",\"country\":\"Argentine Peso\"},{\"currency\":\"AUD\",\"country\":\"Australian Dollar\"},{\"currency\":\"AWG\",\"country\":\"Aruban Florin\"},{\"currency\":\"AZN\",\"country\":\"Azerbaijani Manat\"},{\"currency\":\"BAM\",\"country\":\"Bosnia-Herzegovina Convertible Mark\"},{\"currency\":\"BBD\",\"country\":\"Barbadian Dollar\"},{\"currency\":\"BDT\",\"country\":\"Bangladeshi Taka\"},{\"currency\":\"BGN\",\"country\":\"Bulgarian Lev\"},{\"currency\":\"BHD\",\"country\":\"Bahraini Dinar\"},{\"currency\":\"BIF\",\"country\":\"Burundian Franc\"},{\"currency\":\"BMD\",\"country\":\"Bermudan Dollar\"},{\"currency\":\"BND\",\"country\":\"Brunei Dollar\"},{\"currency\":\"BOB\",\"country\":\"Bolivian Boliviano\"},{\"currency\":\"BRL\",\"country\":\"Brazilian Real\"},{\"currency\":\"BSD\",\"country\":\"Bahamian Dollar\"},{\"currency\":\"BTC\",\"country\":\"Bitcoin\"},{\"currency\":\"BTN\",\"country\":\"Bhutanese Ngultrum\"},{\"currency\":\"BWP\",\"country\":\"Botswanan Pula\"},{\"currency\":\"BYR\",\"country\":\"Belarusian Ruble\"},{\"currency\":\"BZD\",\"country\":\"Belize Dollar\"},{\"currency\":\"CAD\",\"country\":\"Canadian Dollar\"},{\"currency\":\"CDF\",\"country\":\"Congolese Franc\"},{\"currency\":\"CHF\",\"country\":\"Swiss Franc\"},{\"currency\":\"CLF\",\"country\":\"Chilean Unit of Account (UF)\"},{\"currency\":\"CLP\",\"country\":\"Chilean Peso\"},{\"currency\":\"CNY\",\"country\":\"Chinese Yuan\"},{\"currency\":\"COP\",\"country\":\"Colombian Peso\"},{\"currency\":\"CRC\",\"country\":\"Costa Rican Col\\u00f3n\"},{\"currency\":\"CUP\",\"country\":\"Cuban Peso\"},{\"currency\":\"CVE\",\"country\":\"Cape Verdean Escudo\"},{\"currency\":\"CZK\",\"country\":\"Czech Republic Koruna\"},{\"currency\":\"DJF\",\"country\":\"Djiboutian Franc\"},{\"currency\":\"DKK\",\"country\":\"Danish Krone\"},{\"currency\":\"DOP\",\"country\":\"Dominican Peso\"},{\"currency\":\"DZD\",\"country\":\"Algerian Dinar\"},{\"currency\":\"EEK\",\"country\":\"Estonian Kroon\"},{\"currency\":\"EGP\",\"country\":\"Egyptian Pound\"},{\"currency\":\"ERN\",\"country\":\"Eritrean Nnakfa\"},{\"currency\":\"ETB\",\"country\":\"Ethiopian Birr\"},{\"currency\":\"EUR\",\"country\":\"Euro\"},{\"currency\":\"FJD\",\"country\":\"Fijian Dollar\"},{\"currency\":\"FKP\",\"country\":\"Falkland Islands Pound\"},{\"currency\":\"GBP\",\"country\":\"British Pound Sterling\"},{\"currency\":\"GEL\",\"country\":\"Georgian Lari\"},{\"currency\":\"GHS\",\"country\":\"Ghanaian Cedi\"},{\"currency\":\"GIP\",\"country\":\"Gibraltar Pound\"},{\"currency\":\"GMD\",\"country\":\"Gambian Dalasi\"},{\"currency\":\"GNF\",\"country\":\"Guinean Franc\"},{\"currency\":\"GTQ\",\"country\":\"Guatemalan Quetzal\"},{\"currency\":\"GYD\",\"country\":\"Guyanaese Dollar\"},{\"currency\":\"HKD\",\"country\":\"Hong Kong Dollar\"},{\"currency\":\"HNL\",\"country\":\"Honduran Lempira\"},{\"currency\":\"HRK\",\"country\":\"Croatian Kuna\"},{\"currency\":\"HTG\",\"country\":\"Haitian Gourde\"},{\"currency\":\"HUF\",\"country\":\"Hungarian Forint\"},{\"currency\":\"IDR\",\"country\":\"Indonesian Rupiah\"},{\"currency\":\"ILS\",\"country\":\"Israeli New Sheqel\"},{\"currency\":\"INR\",\"country\":\"Indian Rupee\"},{\"currency\":\"IQD\",\"country\":\"Iraqi Dinar\"},{\"currency\":\"IRR\",\"country\":\"Iranian Rial\"},{\"currency\":\"ISK\",\"country\":\"Icelandic Kr\\u00f3na\"},{\"currency\":\"JEP\",\"country\":\"Jersey Pound\"},{\"currency\":\"JMD\",\"country\":\"Jamaican Dollar\"},{\"currency\":\"JOD\",\"country\":\"Jordanian Dinar\"},{\"currency\":\"JPY\",\"country\":\"Japanese Yen\"},{\"currency\":\"KES\",\"country\":\"Kenyan Shilling\"},{\"currency\":\"KGS\",\"country\":\"Kyrgystani Som\"},{\"currency\":\"KHR\",\"country\":\"Cambodian Riel\"},{\"currency\":\"KMF\",\"country\":\"Comorian Franc\"},{\"currency\":\"KPW\",\"country\":\"North Korean Won\"},{\"currency\":\"KRW\",\"country\":\"South Korean Won\"},{\"currency\":\"KWD\",\"country\":\"Kuwaiti Dinar\"},{\"currency\":\"KYD\",\"country\":\"Cayman Islands Dollar\"},{\"currency\":\"KZT\",\"country\":\"Kazakhstani Tenge\"},{\"currency\":\"LAK\",\"country\":\"Laotian Kip\"},{\"currency\":\"LBP\",\"country\":\"Lebanese Pound\"},{\"currency\":\"LKR\",\"country\":\"Sri Lankan Rupee\"},{\"currency\":\"LRD\",\"country\":\"Liberian Dollar\"},{\"currency\":\"LSL\",\"country\":\"Lesotho Loti\"},{\"currency\":\"LTL\",\"country\":\"Lithuanian Litas\"},{\"currency\":\"LVL\",\"country\":\"Latvian Lats\"},{\"currency\":\"LYD\",\"country\":\"Libyan Dinar\"},{\"currency\":\"MAD\",\"country\":\"Moroccan Dirham\"},{\"currency\":\"MDL\",\"country\":\"Moldovan Leu\"},{\"currency\":\"MGA\",\"country\":\"Malagasy Ariary\"},{\"currency\":\"MKD\",\"country\":\"Macedonian Denar\"},{\"currency\":\"MMK\",\"country\":\"Myanma Kyat\"},{\"currency\":\"MNT\",\"country\":\"Mongolian Tugrik\"},{\"currency\":\"MOP\",\"country\":\"Macanese Pataca\"},{\"currency\":\"MRO\",\"country\":\"Mauritanian Ouguiya\"},{\"currency\":\"MTL\",\"country\":\"Maltese Lira\"},{\"currency\":\"MUR\",\"country\":\"Mauritian Rupee\"},{\"currency\":\"MVR\",\"country\":\"Maldivian Rufiyaa\"},{\"currency\":\"MWK\",\"country\":\"Malawian Kwacha\"},{\"currency\":\"MXN\",\"country\":\"Mexican Peso\"},{\"currency\":\"MYR\",\"country\":\"Malaysian Ringgit\"},{\"currency\":\"MZN\",\"country\":\"Mozambican Metical\"},{\"currency\":\"NAD\",\"country\":\"Namibian Dollar\"},{\"currency\":\"NGN\",\"country\":\"Nigerian Naira\"},{\"currency\":\"NIO\",\"country\":\"Nicaraguan C\\u00f3rdoba\"},{\"currency\":\"NOK\",\"country\":\"Norwegian Krone\"},{\"currency\":\"NPR\",\"country\":\"Nepalese Rupee\"},{\"currency\":\"NZD\",\"country\":\"New Zealand Dollar\"},{\"currency\":\"OMR\",\"country\":\"Omani Rial\"},{\"currency\":\"PAB\",\"country\":\"Panamanian Balboa\"},{\"currency\":\"PEN\",\"country\":\"Peruvian Nuevo Sol\"},{\"currency\":\"PGK\",\"country\":\"Papua New Guinean Kina\"},{\"currency\":\"PHP\",\"country\":\"Philippine Peso\"},{\"currency\":\"PKR\",\"country\":\"Pakistani Rupee\"},{\"currency\":\"PLN\",\"country\":\"Polish Zloty\"},{\"currency\":\"PYG\",\"country\":\"Paraguayan Guarani\"},{\"currency\":\"QAR\",\"country\":\"Qatari Rial\"},{\"currency\":\"RON\",\"country\":\"Romanian Leu\"},{\"currency\":\"RSD\",\"country\":\"Serbian Dinar\"},{\"currency\":\"RUB\",\"country\":\"Russian Ruble\"},{\"currency\":\"RWF\",\"country\":\"Rwandan Franc\"},{\"currency\":\"SAR\",\"country\":\"Saudi Riyal\"},{\"currency\":\"SBD\",\"country\":\"Solomon Islands Dollar\"},{\"currency\":\"SCR\",\"country\":\"Seychellois Rupee\"},{\"currency\":\"SDG\",\"country\":\"Sudanese Pound\"},{\"currency\":\"SEK\",\"country\":\"Swedish Krona\"},{\"currency\":\"SGD\",\"country\":\"Singapore Dollar\"},{\"currency\":\"SHP\",\"country\":\"Saint Helena Pound\"},{\"currency\":\"SLL\",\"country\":\"Sierra Leonean Leone\"},{\"currency\":\"SOS\",\"country\":\"Somali Shilling\"},{\"currency\":\"SRD\",\"country\":\"Surinamese Dollar\"},{\"currency\":\"STD\",\"country\":\"S\\u00e3o Tom\\u00e9 and Pr\\u00edncipe Dobra\"},{\"currency\":\"SVC\",\"country\":\"Salvadoran Col\\u00f3n\"},{\"currency\":\"SYP\",\"country\":\"Syrian Pound\"},{\"currency\":\"SZL\",\"country\":\"Swazi Lilangeni\"},{\"currency\":\"THB\",\"country\":\"Thai Baht\"},{\"currency\":\"TJS\",\"country\":\"Tajikistani Somoni\"},{\"currency\":\"TMT\",\"country\":\"Turkmenistani Manat\"},{\"currency\":\"TND\",\"country\":\"Tunisian Dinar\"},{\"currency\":\"TOP\",\"country\":\"Tongan Pa?anga\"},{\"currency\":\"TRY\",\"country\":\"Turkish Lira\"},{\"currency\":\"TTD\",\"country\":\"Trinidad and Tobago Dollar\"},{\"currency\":\"TWD\",\"country\":\"New Taiwan Dollar\"},{\"currency\":\"TZS\",\"country\":\"Tanzanian Shilling\"},{\"currency\":\"UAH\",\"country\":\"Ukrainian Hryvnia\"},{\"currency\":\"UGX\",\"country\":\"Ugandan Shilling\"},{\"currency\":\"USD\",\"country\":\"United States Dollar\"},{\"currency\":\"UYU\",\"country\":\"Uruguayan Peso\"},{\"currency\":\"UZS\",\"country\":\"Uzbekistan Som\"},{\"currency\":\"VEF\",\"country\":\"Venezuelan Bol\\u00edvar Fuerte\"},{\"currency\":\"VND\",\"country\":\"Vietnamese Dong\"},{\"currency\":\"VUV\",\"country\":\"Vanuatu Vatu\"},{\"currency\":\"WST\",\"country\":\"Samoan Tala\"},{\"currency\":\"XAF\",\"country\":\"CFA Franc BEAC\"},{\"currency\":\"XAG\",\"country\":\"Silver (troy ounce)\"},{\"currency\":\"XAU\",\"country\":\"Gold (troy ounce)\"},{\"currency\":\"XBT\",\"country\":\"Bitcoin\"},{\"currency\":\"XCD\",\"country\":\"East Caribbean Dollar\"},{\"currency\":\"XDR\",\"country\":\"Special Drawing Rights\"},{\"currency\":\"XOF\",\"country\":\"CFA Franc BCEAO\"},{\"currency\":\"XPF\",\"country\":\"CFP Franc\"},{\"currency\":\"YER\",\"country\":\"Yemeni Rial\"},{\"currency\":\"ZAR\",\"country\":\"South African Rand\"},{\"currency\":\"ZMK\",\"country\":\"Zambian Kwacha (pre-2013)\"},{\"currency\":\"ZMW\",\"country\":\"Zambian Kwacha\"},{\"currency\":\"ZWL\",\"country\":\"Zimbabwean Dollar\"}]);\r\n  const [query, setQuery] = useState('RUB');\r\n\r\n  useEffect(() => {\r\n    getExchangeRates()\r\n  }, [query, currency])\r\n\r\n  const getExchangeRates = async () => {\r\n    const response = await fetch(`https://api.coindesk.com/v1/bpi/currentprice/${query}.json`)\r\n    const data = await response.json()\r\n    setCurrency(Object.values(data.bpi))\r\n  }\r\n\r\n  const selectCurrency = e => {\r\n    setQuery(e.target.value)\r\n  }\r\n\r\n  return (\r\n    <div className=\"price\">\r\n      <h1 className=\"price__title\">Bitcoin Price Index</h1>\r\n      <select className=\"price__select\" value={query} onChange={selectCurrency}>\r\n        {countries.map(country => (<option value={country.currency} key={country.currency}>{country.country}</option>))}\r\n      </select>\r\n      <div className=\"price__container\">\r\n        {currency.map(curr => (<Currency data={curr} key={curr.code} />))}\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Price;","import React from 'react'\r\n\r\nconst About = () => (\r\n  <h1>About</h1>\r\n)\r\n\r\nexport default About;\r\n","import React from 'react';\r\nimport Nav from './components/Nav'\r\nimport Price from './components/Price'\r\nimport About from './About'\r\nimport { BrowserRouter as Router, Switch, Route } from 'react-router-dom'\r\n\r\nconst App = () => {\r\n  return (\r\n    <Router>\r\n      <div className=\"App\">\r\n        <Nav />\r\n        <Switch>\r\n          <Route path=\"/\" exact component={Home} />\r\n          <Route path=\"/about\" component={About} />\r\n          <Route path=\"/price\" component={Price} />\r\n        </Switch>\r\n      </div>\r\n    </Router>\r\n  );\r\n}\r\n\r\nconst Home = () => (\r\n  <div>\r\n    <h1>Home Page</h1>\r\n  </div>\r\n)\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}