{"version":3,"sources":["components/Currency/index.js","App.js","serviceWorker.js","index.js"],"names":["Currency","currency","data","useState","Date","date","className","description","rate_float","toFixed","getDate","getMonth","getFullYear","App","setCurrency","countries","query","setQuery","useEffect","getExchangeRates","a","fetch","response","json","Object","values","bpi","value","onChange","e","target","map","country","key","curr","code","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.b35cee79.chunk.js","sourcesContent":["import React, { useState } from 'react'\r\nimport './style.css'\r\n\r\nconst Currency = ({ data:currency }) => {\r\n\tconst [date, setDate] = useState(new Date())\r\n\r\n\treturn (\r\n\t\t<div className=\"currency\">\r\n\t\t\t<div className=\"currency__country\">{currency.description}</div>\r\n\t\t\t<div>Price: {currency.rate_float.toFixed(2)}</div>\r\n\t\t\t<div>{`${date.getDate()}.${date.getMonth()}.${date.getFullYear()}`}</div>\r\n\t\t</div>\r\n\t)\r\n}\r\n\r\nexport default Currency;","import React, { useState, useEffect } from 'react';\nimport './App.css';\nimport Currency from './components/Currency';\n\nconst App = () => {\n  const [currency, setCurrency] = useState([]);\n  const [countries, setCountries] = useState([{\"currency\":\"AED\",\"country\":\"United Arab Emirates Dirham\"},{\"currency\":\"AFN\",\"country\":\"Afghan Afghani\"},{\"currency\":\"ALL\",\"country\":\"Albanian Lek\"},{\"currency\":\"AMD\",\"country\":\"Armenian Dram\"},{\"currency\":\"ANG\",\"country\":\"Netherlands Antillean Guilder\"},{\"currency\":\"AOA\",\"country\":\"Angolan Kwanza\"},{\"currency\":\"ARS\",\"country\":\"Argentine Peso\"},{\"currency\":\"AUD\",\"country\":\"Australian Dollar\"},{\"currency\":\"AWG\",\"country\":\"Aruban Florin\"},{\"currency\":\"AZN\",\"country\":\"Azerbaijani Manat\"},{\"currency\":\"BAM\",\"country\":\"Bosnia-Herzegovina Convertible Mark\"},{\"currency\":\"BBD\",\"country\":\"Barbadian Dollar\"},{\"currency\":\"BDT\",\"country\":\"Bangladeshi Taka\"},{\"currency\":\"BGN\",\"country\":\"Bulgarian Lev\"},{\"currency\":\"BHD\",\"country\":\"Bahraini Dinar\"},{\"currency\":\"BIF\",\"country\":\"Burundian Franc\"},{\"currency\":\"BMD\",\"country\":\"Bermudan Dollar\"},{\"currency\":\"BND\",\"country\":\"Brunei Dollar\"},{\"currency\":\"BOB\",\"country\":\"Bolivian Boliviano\"},{\"currency\":\"BRL\",\"country\":\"Brazilian Real\"},{\"currency\":\"BSD\",\"country\":\"Bahamian Dollar\"},{\"currency\":\"BTC\",\"country\":\"Bitcoin\"},{\"currency\":\"BTN\",\"country\":\"Bhutanese Ngultrum\"},{\"currency\":\"BWP\",\"country\":\"Botswanan Pula\"},{\"currency\":\"BYR\",\"country\":\"Belarusian Ruble\"},{\"currency\":\"BZD\",\"country\":\"Belize Dollar\"},{\"currency\":\"CAD\",\"country\":\"Canadian Dollar\"},{\"currency\":\"CDF\",\"country\":\"Congolese Franc\"},{\"currency\":\"CHF\",\"country\":\"Swiss Franc\"},{\"currency\":\"CLF\",\"country\":\"Chilean Unit of Account (UF)\"},{\"currency\":\"CLP\",\"country\":\"Chilean Peso\"},{\"currency\":\"CNY\",\"country\":\"Chinese Yuan\"},{\"currency\":\"COP\",\"country\":\"Colombian Peso\"},{\"currency\":\"CRC\",\"country\":\"Costa Rican Col\\u00f3n\"},{\"currency\":\"CUP\",\"country\":\"Cuban Peso\"},{\"currency\":\"CVE\",\"country\":\"Cape Verdean Escudo\"},{\"currency\":\"CZK\",\"country\":\"Czech Republic Koruna\"},{\"currency\":\"DJF\",\"country\":\"Djiboutian Franc\"},{\"currency\":\"DKK\",\"country\":\"Danish Krone\"},{\"currency\":\"DOP\",\"country\":\"Dominican Peso\"},{\"currency\":\"DZD\",\"country\":\"Algerian Dinar\"},{\"currency\":\"EEK\",\"country\":\"Estonian Kroon\"},{\"currency\":\"EGP\",\"country\":\"Egyptian Pound\"},{\"currency\":\"ERN\",\"country\":\"Eritrean Nnakfa\"},{\"currency\":\"ETB\",\"country\":\"Ethiopian Birr\"},{\"currency\":\"EUR\",\"country\":\"Euro\"},{\"currency\":\"FJD\",\"country\":\"Fijian Dollar\"},{\"currency\":\"FKP\",\"country\":\"Falkland Islands Pound\"},{\"currency\":\"GBP\",\"country\":\"British Pound Sterling\"},{\"currency\":\"GEL\",\"country\":\"Georgian Lari\"},{\"currency\":\"GHS\",\"country\":\"Ghanaian Cedi\"},{\"currency\":\"GIP\",\"country\":\"Gibraltar Pound\"},{\"currency\":\"GMD\",\"country\":\"Gambian Dalasi\"},{\"currency\":\"GNF\",\"country\":\"Guinean Franc\"},{\"currency\":\"GTQ\",\"country\":\"Guatemalan Quetzal\"},{\"currency\":\"GYD\",\"country\":\"Guyanaese Dollar\"},{\"currency\":\"HKD\",\"country\":\"Hong Kong Dollar\"},{\"currency\":\"HNL\",\"country\":\"Honduran Lempira\"},{\"currency\":\"HRK\",\"country\":\"Croatian Kuna\"},{\"currency\":\"HTG\",\"country\":\"Haitian Gourde\"},{\"currency\":\"HUF\",\"country\":\"Hungarian Forint\"},{\"currency\":\"IDR\",\"country\":\"Indonesian Rupiah\"},{\"currency\":\"ILS\",\"country\":\"Israeli New Sheqel\"},{\"currency\":\"INR\",\"country\":\"Indian Rupee\"},{\"currency\":\"IQD\",\"country\":\"Iraqi Dinar\"},{\"currency\":\"IRR\",\"country\":\"Iranian Rial\"},{\"currency\":\"ISK\",\"country\":\"Icelandic Kr\\u00f3na\"},{\"currency\":\"JEP\",\"country\":\"Jersey Pound\"},{\"currency\":\"JMD\",\"country\":\"Jamaican Dollar\"},{\"currency\":\"JOD\",\"country\":\"Jordanian Dinar\"},{\"currency\":\"JPY\",\"country\":\"Japanese Yen\"},{\"currency\":\"KES\",\"country\":\"Kenyan Shilling\"},{\"currency\":\"KGS\",\"country\":\"Kyrgystani Som\"},{\"currency\":\"KHR\",\"country\":\"Cambodian Riel\"},{\"currency\":\"KMF\",\"country\":\"Comorian Franc\"},{\"currency\":\"KPW\",\"country\":\"North Korean Won\"},{\"currency\":\"KRW\",\"country\":\"South Korean Won\"},{\"currency\":\"KWD\",\"country\":\"Kuwaiti Dinar\"},{\"currency\":\"KYD\",\"country\":\"Cayman Islands Dollar\"},{\"currency\":\"KZT\",\"country\":\"Kazakhstani Tenge\"},{\"currency\":\"LAK\",\"country\":\"Laotian Kip\"},{\"currency\":\"LBP\",\"country\":\"Lebanese Pound\"},{\"currency\":\"LKR\",\"country\":\"Sri Lankan Rupee\"},{\"currency\":\"LRD\",\"country\":\"Liberian Dollar\"},{\"currency\":\"LSL\",\"country\":\"Lesotho Loti\"},{\"currency\":\"LTL\",\"country\":\"Lithuanian Litas\"},{\"currency\":\"LVL\",\"country\":\"Latvian Lats\"},{\"currency\":\"LYD\",\"country\":\"Libyan Dinar\"},{\"currency\":\"MAD\",\"country\":\"Moroccan Dirham\"},{\"currency\":\"MDL\",\"country\":\"Moldovan Leu\"},{\"currency\":\"MGA\",\"country\":\"Malagasy Ariary\"},{\"currency\":\"MKD\",\"country\":\"Macedonian Denar\"},{\"currency\":\"MMK\",\"country\":\"Myanma Kyat\"},{\"currency\":\"MNT\",\"country\":\"Mongolian Tugrik\"},{\"currency\":\"MOP\",\"country\":\"Macanese Pataca\"},{\"currency\":\"MRO\",\"country\":\"Mauritanian Ouguiya\"},{\"currency\":\"MTL\",\"country\":\"Maltese Lira\"},{\"currency\":\"MUR\",\"country\":\"Mauritian Rupee\"},{\"currency\":\"MVR\",\"country\":\"Maldivian Rufiyaa\"},{\"currency\":\"MWK\",\"country\":\"Malawian Kwacha\"},{\"currency\":\"MXN\",\"country\":\"Mexican Peso\"},{\"currency\":\"MYR\",\"country\":\"Malaysian Ringgit\"},{\"currency\":\"MZN\",\"country\":\"Mozambican Metical\"},{\"currency\":\"NAD\",\"country\":\"Namibian Dollar\"},{\"currency\":\"NGN\",\"country\":\"Nigerian Naira\"},{\"currency\":\"NIO\",\"country\":\"Nicaraguan C\\u00f3rdoba\"},{\"currency\":\"NOK\",\"country\":\"Norwegian Krone\"},{\"currency\":\"NPR\",\"country\":\"Nepalese Rupee\"},{\"currency\":\"NZD\",\"country\":\"New Zealand Dollar\"},{\"currency\":\"OMR\",\"country\":\"Omani Rial\"},{\"currency\":\"PAB\",\"country\":\"Panamanian Balboa\"},{\"currency\":\"PEN\",\"country\":\"Peruvian Nuevo Sol\"},{\"currency\":\"PGK\",\"country\":\"Papua New Guinean Kina\"},{\"currency\":\"PHP\",\"country\":\"Philippine Peso\"},{\"currency\":\"PKR\",\"country\":\"Pakistani Rupee\"},{\"currency\":\"PLN\",\"country\":\"Polish Zloty\"},{\"currency\":\"PYG\",\"country\":\"Paraguayan Guarani\"},{\"currency\":\"QAR\",\"country\":\"Qatari Rial\"},{\"currency\":\"RON\",\"country\":\"Romanian Leu\"},{\"currency\":\"RSD\",\"country\":\"Serbian Dinar\"},{\"currency\":\"RUB\",\"country\":\"Russian Ruble\"},{\"currency\":\"RWF\",\"country\":\"Rwandan Franc\"},{\"currency\":\"SAR\",\"country\":\"Saudi Riyal\"},{\"currency\":\"SBD\",\"country\":\"Solomon Islands Dollar\"},{\"currency\":\"SCR\",\"country\":\"Seychellois Rupee\"},{\"currency\":\"SDG\",\"country\":\"Sudanese Pound\"},{\"currency\":\"SEK\",\"country\":\"Swedish Krona\"},{\"currency\":\"SGD\",\"country\":\"Singapore Dollar\"},{\"currency\":\"SHP\",\"country\":\"Saint Helena Pound\"},{\"currency\":\"SLL\",\"country\":\"Sierra Leonean Leone\"},{\"currency\":\"SOS\",\"country\":\"Somali Shilling\"},{\"currency\":\"SRD\",\"country\":\"Surinamese Dollar\"},{\"currency\":\"STD\",\"country\":\"S\\u00e3o Tom\\u00e9 and Pr\\u00edncipe Dobra\"},{\"currency\":\"SVC\",\"country\":\"Salvadoran Col\\u00f3n\"},{\"currency\":\"SYP\",\"country\":\"Syrian Pound\"},{\"currency\":\"SZL\",\"country\":\"Swazi Lilangeni\"},{\"currency\":\"THB\",\"country\":\"Thai Baht\"},{\"currency\":\"TJS\",\"country\":\"Tajikistani Somoni\"},{\"currency\":\"TMT\",\"country\":\"Turkmenistani Manat\"},{\"currency\":\"TND\",\"country\":\"Tunisian Dinar\"},{\"currency\":\"TOP\",\"country\":\"Tongan Pa?anga\"},{\"currency\":\"TRY\",\"country\":\"Turkish Lira\"},{\"currency\":\"TTD\",\"country\":\"Trinidad and Tobago Dollar\"},{\"currency\":\"TWD\",\"country\":\"New Taiwan Dollar\"},{\"currency\":\"TZS\",\"country\":\"Tanzanian Shilling\"},{\"currency\":\"UAH\",\"country\":\"Ukrainian Hryvnia\"},{\"currency\":\"UGX\",\"country\":\"Ugandan Shilling\"},{\"currency\":\"USD\",\"country\":\"United States Dollar\"},{\"currency\":\"UYU\",\"country\":\"Uruguayan Peso\"},{\"currency\":\"UZS\",\"country\":\"Uzbekistan Som\"},{\"currency\":\"VEF\",\"country\":\"Venezuelan Bol\\u00edvar Fuerte\"},{\"currency\":\"VND\",\"country\":\"Vietnamese Dong\"},{\"currency\":\"VUV\",\"country\":\"Vanuatu Vatu\"},{\"currency\":\"WST\",\"country\":\"Samoan Tala\"},{\"currency\":\"XAF\",\"country\":\"CFA Franc BEAC\"},{\"currency\":\"XAG\",\"country\":\"Silver (troy ounce)\"},{\"currency\":\"XAU\",\"country\":\"Gold (troy ounce)\"},{\"currency\":\"XBT\",\"country\":\"Bitcoin\"},{\"currency\":\"XCD\",\"country\":\"East Caribbean Dollar\"},{\"currency\":\"XDR\",\"country\":\"Special Drawing Rights\"},{\"currency\":\"XOF\",\"country\":\"CFA Franc BCEAO\"},{\"currency\":\"XPF\",\"country\":\"CFP Franc\"},{\"currency\":\"YER\",\"country\":\"Yemeni Rial\"},{\"currency\":\"ZAR\",\"country\":\"South African Rand\"},{\"currency\":\"ZMK\",\"country\":\"Zambian Kwacha (pre-2013)\"},{\"currency\":\"ZMW\",\"country\":\"Zambian Kwacha\"},{\"currency\":\"ZWL\",\"country\":\"Zimbabwean Dollar\"}]);\n  const [query, setQuery] = useState('RUB');\n\n  useEffect(() => {\n    getExchangeRates()\n  }, [query, currency])\n\n  const getExchangeRates = async () => {\n    const response = await fetch(`https://api.coindesk.com/v1/bpi/currentprice/${query}.json`)\n    const data = await response.json()\n    setCurrency(Object.values(data.bpi))\n  }\n\n  const selectCurrency = e => {\n    setQuery(e.target.value)\n  }\n\n  return (\n    <div className=\"App\">\n      <h1 className=\"App__title\">Bitcoin Price Index</h1>\n      <select className=\"App__select\" value={query} onChange={selectCurrency}>\n        {countries.map(country => (<option value={country.currency} key={country.currency}>{country.country}</option>))}\n      </select>\n      <div className=\"App__container\">\n        {currency.map(curr => (<Currency data={curr} key={curr.code} />))}\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}